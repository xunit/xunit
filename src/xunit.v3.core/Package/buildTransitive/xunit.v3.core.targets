<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <UsingTask
      AssemblyFile="$(MSBuildThisFileDirectory)..\_content\tasks\netfx\xunit.v3.msbuildtasks.dll"
      Condition=" '$(MSBuildRuntimeType)' != 'Core' "
      TaskName="Xunit.v3.MSBuildTasks.XunitGenerateEntryPoint"/>
  <UsingTask
      AssemblyFile="$(MSBuildThisFileDirectory)..\_content\tasks\netcore\xunit.v3.msbuildtasks.dll"
      Condition=" '$(MSBuildRuntimeType)' == 'Core' "
      TaskName="Xunit.v3.MSBuildTasks.XunitGenerateEntryPoint"/>

  <!-- Ensure that the output type is executable (and includes the .NET app host) -->
  <Target Name="_XunitValidateBuild" BeforeTargets="BeforeBuild" Condition=" '$(TargetFramework)' != '' ">
    <Error Text="xUnit.net v3 test projects must be executable (set project property '&lt;OutputType&gt;Exe&lt;/OutputType&gt;'). If this is not a test project, reference xunit.v3.extensibilty.core instead." Condition=" '$(OutputType)' != 'Exe' " />
    <Error Text="xUnit.net v3 test projects must build an app host (set project property '&lt;UseAppHost&gt;true&lt;/UseAppHost&gt;'). If this is not a test project, reference xunit.v3.extensibilty.core instead." Condition=" '$(UseAppHost)' != 'true' AND '$(TargetFrameworkIdentifier)' == '.NETCoreApp' " />
  </Target>

  <!-- Make sure we generate the PDB type that TPv1 and TPv2/MTP expect -->
  <PropertyGroup>
    <DebugSymbols Condition=" '$(DebugSymbols)' == '' ">true</DebugSymbols>
  </PropertyGroup>

  <Choose>
    <When Condition=" '$(TargetFrameworkIdentifier)' == '.NETFramework' ">
      <PropertyGroup>
        <AutoGenerateBindingRedirects Condition=" '$(AutoGenerateBindingRedirects)' == '' ">true</AutoGenerateBindingRedirects>
        <DebugType Condition=" '$(DebugType)' == '' ">full</DebugType>
        <GenerateBindingRedirectsOutputType Condition=" '$(GenerateBindingRedirectsOutputType)' == '' ">true</GenerateBindingRedirectsOutputType>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <DebugType Condition=" '$(DebugType)' == '' ">portable</DebugType>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <!--
  Generate the entry point, adapted from
  https://github.com/microsoft/testfx/blob/a047150c9fcedb16d29d5da35a459352d80c7818/src/Platform/Microsoft.Testing.Platform.MSBuild/buildMultiTargeting/Microsoft.Testing.Platform.MSBuild.targets
  -->
  <Target Name="_XunitCreateEntryPointCache">
    <PropertyGroup>
      <_XunitEntryPointCachePath>$(IntermediateOutputPath)$(MSBuildProjectName).xUnit.v3.EntryPoint.cache</_XunitEntryPointCachePath>
      <_XunitEntryPointCachePath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_XunitEntryPointCachePath)))</_XunitEntryPointCachePath>
    </PropertyGroup>
    <ItemGroup>
      <_XunitEntryPointCacheHashItems Include="$(RootNamespace)"/>
      <_XunitEntryPointCacheHashItems Include="$(UseMicrosoftTestingPlatformRunner)" />
      <_XunitEntryPointCacheHashItems Include="$(XunitAutoGeneratedEntryPoint)"/>
      <XunitEntryPointCachePath Include="$(_XunitEntryPointCachePath)" />
    </ItemGroup>
    <Hash ItemsToHash="@(_XunitEntryPointCacheHashItems)">
      <Output TaskParameter="HashResult" PropertyName="_XunitEntryPointCacheHash" />
    </Hash>
    <WriteLinesToFile Lines="$(_XunitEntryPointCacheHash)" File="$(_XunitEntryPointCachePath)" Overwrite="true" WriteOnlyWhenDifferent="true" />
    <ItemGroup>
      <FileWrites Include="$(_XunitEntryPointCachePath)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <_XunitEntryPointFileName>XunitAutoGeneratedEntryPoint$(DefaultLanguageSourceExtension)</_XunitEntryPointFileName>
    <_XunitEntryPointPath>$([System.IO.Path]::Combine($(IntermediateOutputPath),$(_XunitEntryPointFileName)))</_XunitEntryPointPath>
    <_XunitEntryPointPath>$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), $(_XunitEntryPointPath)))</_XunitEntryPointPath>
  </PropertyGroup>

  <Target Name="_XunitGenerateEntryPoint" Inputs="@(XunitEntryPointCachePath)" Outputs="$(_XunitEntryPointPath)" Condition=" '$(XunitAutoGeneratedEntryPoint)' != 'false' " DependsOnTargets="_XunitCreateEntryPointCache">
    <XunitGenerateEntryPoint SourcePath="$(_XunitEntryPointPath)" RootNamespace="$(RootNamespace)" Language="$(Language)" UseMicrosoftTestingPlatformRunner="$(UseMicrosoftTestingPlatformRunner)" />
    <ItemGroup>
      <FileWrites Include="$(_XunitEntryPointPath)" />
    </ItemGroup>
  </Target>

  <!-- Attach the auto-injected source to the build process -->
  <Target Name="_XunitAttachSourceFiles" BeforeTargets="BeforeCompile;CoreCompile;XamlPreCompile" DependsOnTargets="_XunitGenerateEntryPoint">
    <!-- Register the built-in runner reporters -->
    <ItemGroup Condition=" '$(XunitRegisterBuiltInRunnerReporters)' != 'false' ">
      <Compile Include="$(MSBuildThisFileDirectory)..\_content\DefaultRunnerReporters$(DefaultLanguageSourceExtension)" />
    </ItemGroup>

    <!-- Register the auto-generated entry point -->
    <ItemGroup Condition=" '$(XunitAutoGeneratedEntryPoint)' != 'false' ">
      <!-- In F#, the order of compile items matter. CompileAfter are ensured to be at the end. -->
      <!-- This avoids the need to depend on implementation details of MTP targets (i.e, targets that start with underscore) -->
      <CompileAfter Include="$(_XunitEntryPointPath)" Condition=" '$(Language)' == 'F#' " />
      <Compile Include="$(_XunitEntryPointPath)" Condition=" '$(Language)' != 'F#' " />
      <FileWrites Include="$(_XunitEntryPointPath)" />
    </ItemGroup>
  </Target>

  <!-- Copy dependencies used by dynamic linked runners like NCrunch -->
  <Target Name="_XunitCopyRunnerDependencies" AfterTargets="Build">
    <ItemGroup>
      <XunitRunnerDependencies Condition=" '$(TargetFrameworkIdentifier)' == '.NETFramework' " Include="$(MSBuildThisFileDirectory)..\_content\runners\netfx\*" />
      <XunitRunnerDependencies Condition=" '$(TargetFrameworkIdentifier)' == '.NETCoreApp' "   Include="$(MSBuildThisFileDirectory)..\_content\runners\netcore\*" />
    </ItemGroup>
    <Copy SourceFiles="@(XunitRunnerDependencies)" DestinationFolder="$([System.IO.Path]::Combine($(MSBuildProjectDirectory),$(OutputPath)))" SkipUnchangedFiles="true" />
  </Target>

</Project>

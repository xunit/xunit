<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <BeforePack>_UpdateTemplates</BeforePack>
    <EnforceCodeStyleInBuild>false</EnforceCodeStyleInBuild>
    <NoWarn>$(NoWarn);NU5128</NoWarn>
    <TargetFramework>netstandard2.0</TargetFramework>
    <VisualStudioRunnerTemplateVersion Condition=" '$(VisualStudioRunnerTemplateVersion)' == '' ">$(XunitVisualStudioRunnerVersion)</VisualStudioRunnerTemplateVersion>
    <XunitAnalyzersTemplateVersion Condition=" '$(XunitAnalyzersTemplateVersion)' == '' ">$(XunitAnalyzersVersion)</XunitAnalyzersTemplateVersion>
    <XunitArtifactsPath>$(MSBuildThisFileDirectory)..\..\artifacts\xunit.v3.templates\</XunitArtifactsPath>
    <_XunitIncludeCommonItems>false</_XunitIncludeCommonItems>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="**\*" />
    <None Include="**\*" Exclude="**\obj\**;**\bin\**" />
    <TemplateInput Include="templates\**\*" Exclude="templates\.*;templates\Directory.*">
      <XunitArtifactLocation>$(XunitArtifactsPath)$([System.String]::Concat(%(RelativeDir), '%(Filename)%(Extension)'))</XunitArtifactLocation>
    </TemplateInput>
  </ItemGroup>

  <Target Name="_UpdateTemplates"
          DependsOnTargets="UpdateNuSpecProperties"
          Inputs="@(TemplateInput);..\src\Versions.props;..\src\Directory.Build.*"
          Outputs="%(TemplateInput.XunitArtifactLocation)">
    <MakeDir Directories="$(XunitArtifactsPath)" />
    <Copy SourceFiles="%(TemplateInput.Fullpath)" DestinationFiles="%(TemplateInput.XunitArtifactLocation)" />
    <ReplaceFileText InputFilename="%(TemplateInput.XunitArtifactLocation)"
                     OutputFilename="%(TemplateInput.XunitArtifactLocation)"
                     MatchExpression="MICROSOFT_NET_TEST_SDK_VERSION;PACKAGE_VERSION;XUNIT_ANALYZERS_VERSION;XUNIT_VISUAL_STUDIO_RUNNER_VERSION"
                     ReplacementText="$(MicrosoftNetTestSdkVersion);$(PackageVersion);$(XunitAnalyzersTemplateVersion);$(VisualStudioRunnerTemplateVersion)" />
    <ItemGroup>
      <FileWrites Include="%(TemplateInput.XunitArtifactLocation)" />
    </ItemGroup>
  </Target>

  <UsingTask TaskName="ReplaceFileText" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <InputFileName ParameterType="System.String" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <MatchExpression ParameterType="System.String[]" Required="true" />
      <ReplacementText ParameterType="System.String[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            if (MatchExpression.Length != ReplacementText.Length)
              throw new Exception("The number of MatchExpression items must match the number of ReplacementText items.");

            for (int i = 0; i < MatchExpression.Length; i++)
                File.WriteAllText(OutputFileName, Regex.Replace(File.ReadAllText(InputFileName), MatchExpression[i], ReplacementText[i]));
          ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>

# top-most EditorConfig file
root = true

[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
indent_style = tab

[*.sln]
end_of_line = crlf

# Visual Studio demands 2-spaced project files
# Tabs are not legal whitespace for YAML files
[*.{csproj,json,props,targets,xslt,yaml,yml}]
indent_style = space
indent_size = 2

[*.cs]
# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_property = false

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members

# Expression-level preferences
dotnet_style_coalesce_expression = true
dotnet_style_collection_initializer = true
dotnet_style_explicit_tuple_names = true
dotnet_style_namespace_match_folder = false
dotnet_style_null_propagation = true
dotnet_style_object_initializer = true
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_conditional_expression_over_assignment = true
dotnet_style_prefer_conditional_expression_over_return = false
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed
dotnet_style_prefer_inferred_anonymous_type_member_names = true
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_style_prefer_simplified_interpolation = true

# Field preferences
dotnet_style_readonly_field = true

# Parameter preferences
dotnet_code_quality_unused_parameters = all

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = all

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = true
dotnet_style_allow_statement_immediately_after_block_experimental = true

#### C# Coding Conventions ####

# var preferences
csharp_style_var_elsewhere = true
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true

# Expression-bodied members
csharp_style_expression_bodied_accessors = true
csharp_style_expression_bodied_constructors = true
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = true
csharp_style_expression_bodied_methods = true
csharp_style_expression_bodied_operators = true
csharp_style_expression_bodied_properties = true

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_extended_property_pattern = true
csharp_style_prefer_not_pattern = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_switch_expression = true

# Null-checking preferences
csharp_style_conditional_delegate_call = true

# Modifier preferences
csharp_prefer_static_local_function = true
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async

# Code-block preferences
csharp_prefer_braces = false
csharp_prefer_simple_using_statement = true
csharp_style_namespace_declarations = file_scoped

# Expression-level preferences
csharp_prefer_simple_default_expression = true
csharp_style_deconstructed_variable_declaration = true
csharp_style_implicit_object_creation_when_type_is_apparent = true
csharp_style_inlined_variable_declaration = true
csharp_style_pattern_local_over_anonymous_function = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_null_check_over_type_check = true
csharp_style_prefer_range_operator = true
csharp_style_throw_expression = true
csharp_style_unused_value_assignment_preference = discard_variable
csharp_style_unused_value_expression_statement_preference = discard_variable

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true
csharp_style_allow_embedded_statements_on_same_line_experimental = true

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

#### Naming styles ####

# Naming rules

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# Symbol specifications

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers =

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

# Naming styles

dotnet_naming_style.pascal_case.required_prefix =
dotnet_naming_style.pascal_case.required_suffix =
dotnet_naming_style.pascal_case.word_separator =
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix =
dotnet_naming_style.begins_with_i.word_separator =
dotnet_naming_style.begins_with_i.capitalization = pascal_case

#### Code quality rules ####

# Tracking for SafeDispose and SafeDisposeAsync

dotnet_code_quality.dispose_ownership_transfer_at_method_call = true

# Analyzer configuration

dotnet_code_quality.CA1062.null_check_validation_methods = Xunit.Internal.Guard.ArgumentNotNull``1(``0,System.String)|Xunit.Internal.Guard.ArgumentNotNull``1(System.Nullable{``0},System.String)|Xunit.Internal.Guard.ArgumentNotNull``1(System.String,``0,System.String)|Xunit.Internal.Guard.ArgumentNotNullOrEmpty``1(``0,System.String)|Xunit.Internal.Guard.ArgumentNotNullOrEmpty``1(System.String,``0,System.String)

# Analyzer severity

dotnet_diagnostic.CA1002.severity    = none  # Do not expose generic lists
dotnet_diagnostic.CA1008.severity    = none  # Add a member to enum that has a value of zero
dotnet_diagnostic.CA1014.severity    = none  # Mark assemblies with CLSCompliantAttribute
dotnet_diagnostic.CA1031.severity    = none  # Modify method to catch a more specific allowed exception type
dotnet_diagnostic.CA1032.severity    = none  # Add missing constructor to exception
dotnet_diagnostic.CA1034.severity    = none  # Do not nest types
dotnet_diagnostic.CA1050.severity    = none  # Declare types in namespaces
dotnet_diagnostic.CA1051.severity    = none  # Do not declare visible instance fields
dotnet_diagnostic.CA1054.severity    = none  # URI parameters should not be strings
dotnet_diagnostic.CA1063.severity    = none  # Ensure that Dispose is declared as public and sealed
dotnet_diagnostic.CA1200.severity    = none  # Avoid using cref tags with a prefix
dotnet_diagnostic.CA1303.severity    = none  # Do not pass literals as localized parameters
dotnet_diagnostic.CA1707.severity    = none  # Remove the underscores from type name
dotnet_diagnostic.CA1710.severity    = none  # Identifiers should have correct suffix
dotnet_diagnostic.CA1711.severity    = none  # Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1716.severity    = none  # Rename virtual/interface member so that it no longer conflicts with the reserved language keyword
dotnet_diagnostic.CA1720.severity    = none  # Identifier contains type name
dotnet_diagnostic.CA1721.severity    = none  # Property names should not match get methods
dotnet_diagnostic.CA1724.severity    = none  # Type names should not match namespaces
dotnet_diagnostic.CA1810.severity    = none  # Do not use static constructors
dotnet_diagnostic.CA1815.severity    = none  # Override equals and operator equals on value types
dotnet_diagnostic.CA1819.severity    = none  # Properties should not return arrays
dotnet_diagnostic.CA1859.severity    = none  # Use concrete types when possible for improved performance
dotnet_diagnostic.CA1861.severity    = none  # Avoid constant arrays as arguments
dotnet_diagnostic.CA2007.severity    = none  # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2211.severity    = none  # Non-constant fields should not be visible
dotnet_diagnostic.CS9113.severity    = none  # Primary constructor parameter is unread
dotnet_diagnostic.IDE0040.severity   = none  # Add accessibility modifiers
dotnet_diagnostic.IDE0042.severity   = none  # Deconstruct variable declaration
dotnet_diagnostic.IDE0057.severity   = none  # Use range operator (not available in .NET Framework, even with C# 8+)
dotnet_diagnostic.IDE0058.severity   = none  # Expression value is never used
dotnet_diagnostic.IDE0072.severity   = none  # Populate switch
dotnet_diagnostic.IDE0240.severity   = none  # Nullable directive is redundant
dotnet_diagnostic.IDE0305.severity   = none  # Use collection expression for fluent (turned off because the fix changes semantics)
dotnet_diagnostic.IDE1006.severity   = none  # Naming rule violation
dotnet_diagnostic.xUnit1004.severity = none  # Test methods should not be skipped
dotnet_diagnostic.xUnit1045.severity = none  # Avoid using TheoryData type arguments that might not be serializable
dotnet_diagnostic.xUnit1046.severity = none  # Avoid using TheoryDataRow arguments that are not serializable
dotnet_diagnostic.xUnit2032.severity = none  # Type assertions based on 'assignable from' are confusingly named
